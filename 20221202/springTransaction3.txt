servlet-context.xml에 bean 추가

<!-- DriverManagerDataSource 클래스 bean 설정 => DB 연결정보 -->
<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
	<beans:property name="username" value="koreait"/>
	<beans:property name="password" value="0000"/>
</beans:bean>

<!-- JdbcTemplate 클래스 bean 설정 => DB와 연결 -->
<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
	<beans:property name="dataSource" ref="dataSource"/>
</beans:bean>

<!-- 트랜잭션 Bean 설정 => springTransaction2에서 추가 -->
<beans:bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<beans:property name="dataSource" ref="dataSource"/>
</beans:bean>

여기부터
<!-- 트랜잭션 Bean을 참조하는 트랜잭션 템플릿 Bean 설정 => springTransaction3에서 추가 -->
<beans:bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
	<beans:property name="transactionManager" ref="transactionManager"/>
</beans:bean>
여기까지 추가

<!-- DAO 클래스의 bean 설정 -->
<beans:bean name="dao" class="com.koreait.dao.TransactionDAO">
	<beans:property name="template" ref="template"/>
	<!-- 트랜잭선 객체 초기화 => springTransaction2에서 추가 => 트랜잭션 템플릿을 사용하므로 필요없다. -->
	<!-- <beans:property name="transactionManager" ref="transactionManager"/> --> 주석처리
	<!-- 트랜잭션 템플릿 객체 초기화 => springTransaction3에서 추가 -->
	<beans:property name="transactionTemplate" ref="transactionTemplate"/> 이거 추가
</beans:bean>

==============================================================================================
DAO 클래스

//	트랜잭션 객체를 선언하고 초기화 시킨다. => 사용하지 않으므로 주석 처리
//	PlatformTransactionManager transactionManager;
//	public void setTransactionManager( PlatformTransactionManager transactionManager) {
//		this.transactionManager = transactionManager;
//	}

//	트랜잭션 객체 대신 트랜잭션 템플릿을 사용한다.
	TransactionTemplate transactionTemplate;
	public void setTransactionTemplate(TransactionTemplate transactionTemplate) {
		this.transactionTemplate = transactionTemplate;
	}

//	buyTicket() 메소드 내부
//	여기부터
	/*
//	트랜잭션 상태를 처리할 객체를 생성하고 PlatformTransactionManager 객체를 사용해 초기화시킨다.
	TransactionDefinition definition = new DefaultTransactionDefinition();
	TransactionStatus status = transactionManager.getTransaction(definition);

//	트랜잭션 객체 사용 코드 제거
	try {

// 		card, ticker 테이블의 insert 메소드 실행
//		정상 처리되면 트랜잭션을 commit 시킨다.
		transactionManager.commit(status);

	} catch (Exception e) {
//		정상 처리가 되지않으면 트랜잭션을 rollback 시킨다.
		transactionManager.rollback(status);
	}
	*/
//	여기까지 주석처리

//	트랜잭선 템플릿 코딩
	try {

		transactionTemplate.execute(new TransactionCallbackWithoutResult() {
			@Override
			protected void doInTransactionWithoutResult(TransactionStatus status) {
				
// 				card, ticker 테이블의 insert 메소드 실행	
					
			}
		});

	} catch (Exception e) {
		e.printStackTrace();
	}
